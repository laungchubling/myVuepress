(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{206:function(v,_,a){"use strict";a.r(_);var t=a(0),c=Object(t.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"可维护性与代码耦合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可维护性与代码耦合"}},[v._v("#")]),v._v(" 可维护性与代码耦合#")]),v._v(" "),a("h2",{attrs:{id:"可维护的代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可维护的代码"}},[v._v("#")]),v._v(" 可维护的代码")]),v._v(" "),a("p",[v._v("​\n  在早期的网站，"),a("code",[v._v("JavaScript")]),v._v("主要是用于小特效或者是表单验证。而今天的web应用则会有成千上万行"),a("code",[v._v("JavaScript")]),v._v("代码，执行各种复杂的过程。这种演变让开发者必须得考虑到可维护性。除了秉承较传统理念的软件工程师外，还要雇佣"),a("code",[v._v("JavaScript")]),v._v("开发人员为公司创造价值，而他们并非仅仅按时交付产品，同时还要开发智力成果在之后不断地增加价值。")]),v._v(" "),a("p",[v._v("​   编写可维护的代码很重要，因为大部分开发人员都花费大量时间维护他人的代码。很难从头开始开发新代码的，很多情况下是以他人的工作成果为基础的。确保自己的代码的可维护性，以便其他开发人员在此基础上更好的开展工作。")]),v._v(" "),a("h3",{attrs:{id:"什么是可维护代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是可维护代码"}},[v._v("#")]),v._v(" 什么是可维护代码")]),v._v(" "),a("p",[v._v("  可维护的代码有一些特征。一般来说，如果说代码是可维护的，它需要遵循以下特点：")]),v._v(" "),a("ul",[a("li",[v._v("可理解性：其他人可以接手代码并理解它的意图和一般用途，而无需原开发人员的完整解释。")]),v._v(" "),a("li",[v._v("直观性：代码中的东西一看就能明白，不管操作过程多么复杂。")]),v._v(" "),a("li",[v._v("可适应性：代码以一种数据上的变化不要求完全重写的方法撰写。")]),v._v(" "),a("li",[v._v("可拓展性：在代码架构上已考虑到未来允许对核心功能进行扩展。")]),v._v(" "),a("li",[v._v("可调试性：当有地方出错时，代码可以给予足够的信息来尽可能直接地定位问题所在。")])]),v._v(" "),a("hr"),v._v(" "),a("h2",{attrs:{id:"代码耦合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码耦合"}},[v._v("#")]),v._v(" 代码耦合")]),v._v(" "),a("p",[v._v("​   只要应用的某个部分过分耦合于另一部分，代码就会耦合过紧，难于维护。紧密耦合的软件难于维护并且需要经常重写。目前web组成只要按"),a("code",[v._v("HTML")]),v._v("、"),a("code",[v._v("CSS")]),v._v("和"),a("code",[v._v("JavaScript")]),v._v("三个重要部分分开数据、样式和行为的三个层次。各自之间可能会因各种原因需要紧密交互，而某些可行的方案会产生过紧耦合的现象，不利于代码的可维护性。")]),v._v(" "),a("h3",{attrs:{id:"html-和-javascript-的耦合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html-和-javascript-的耦合"}},[v._v("#")]),v._v(" HTML 和 JavaScript 的耦合")]),v._v(" "),a("p",[v._v("​  "),a("code",[v._v("HTML")]),v._v(" 和 "),a("code",[v._v("JavaScript")]),v._v(" 的耦合是最常见的耦合类型。两者的耦合形式可以分成两种情况："),a("br"),v._v("\n  第一种是在"),a("code",[v._v("HTML")]),v._v("文件中写"),a("code",[v._v("JavaScript")]),v._v("，"),a("code",[v._v("HTML")]),v._v("中用"),a("code",[v._v("<script>")]),v._v("标签直接写"),a("code",[v._v("JavaScript")]),v._v("代码片段或者将事件处理逻辑直接嵌入元素属性中。")]),v._v(" "),a("blockquote",[a("p",[v._v("这种情况下：\n首先，"),a("code",[v._v("HTML")]),v._v("下的"),a("code",[v._v("JavaScript")]),v._v("代码只能在浏览器环境下调试；\n其次，当"),a("code",[v._v("HTML")]),v._v("耦合"),a("code",[v._v("JavaScript")]),v._v("外引入其他"),a("code",[v._v("JavaScript")]),v._v("文件情况下，"),a("code",[v._v("JavaScript")]),v._v("部分出现错误时还需先判断错误出现在哪个文件，而且还牵连出引入代码是否和嵌入代码矛盾等等复杂的问题；\n再者，写在属性中的代码在操作元素的情况下可能存在被覆盖或者删除的风险。")])]),v._v(" "),a("p",[v._v("  第二种是在"),a("code",[v._v("JavaScript")]),v._v("文件中嵌入"),a("code",[v._v("HTML")]),v._v("，"),a("code",[v._v("JavaScript")]),v._v("中使用"),a("code",[v._v("innerHTML")]),v._v("等方法插入一段"),a("code",[v._v("HTML")]),v._v("代码到页面。")]),v._v(" "),a("blockquote",[a("p",[v._v("这种情况下：动态插入的部分在查找源代码时无法直接查到；当该部分没被正确样式化等意外情况发生时，难以直接定位并维护。")])]),v._v(" "),a("p",[v._v("​  "),a("code",[v._v("HTML")]),v._v("呈现应该尽可能与"),a("code",[v._v("JavaScript")]),v._v("保持分离。当"),a("code",[v._v("JavaScript")]),v._v("用于插入数据时，尽量不要直接插入标记。一般可以在页面中直接包含并隐藏标记，然后等到整个页面渲染好之后，就可以用"),a("code",[v._v("JavaScript")]),v._v("显示该标记，而并非生成它。另一种方法是进行"),a("code",[v._v("Ajax")]),v._v("请求并获取更多要显示的"),a("code",[v._v("HTML")]),v._v("，这个方法可以让同样的渲染层（"),a("code",[v._v("PHP")]),v._v("、"),a("code",[v._v("JSP")]),v._v("、"),a("code",[v._v("Ruby")]),v._v("等等）来输出标记，并不是直接嵌入在"),a("code",[v._v("JavaScript")]),v._v("中。\n​  将HTML和"),a("code",[v._v("JavaScript")]),v._v("解耦可以在调试过程中节省时间，更加容易确定错误的来源，也减轻维护的难度：更改行为只需在"),a("code",[v._v("JavaScript")]),v._v("文件中进行，而更改标记则只要在渲染文件中。")]),v._v(" "),a("h3",{attrs:{id:"css和-javascript-的耦合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css和-javascript-的耦合"}},[v._v("#")]),v._v(" CSS和 JavaScript 的耦合")]),v._v(" "),a("p",[v._v("​  常见的过紧耦合发生在"),a("code",[v._v("JavaScript")]),v._v("中利用各种方法动态修改样式。当页面样式发生差错时，应该通过排查"),a("code",[v._v("CSS")]),v._v("样式文件来查找维护，而动态修改的样式耦合在"),a("code",[v._v("JavaScript")]),v._v("文件中，大大降低可维护性。\n​  针对这种过紧耦合类型，一般通过动态更改样式类的方法优化可维护性。"),a("code",[v._v("JavaScript")]),v._v("部分只控制交互中动态切换样式类，样式统一严格写在"),a("code",[v._v("CSS")]),v._v("文件中，大大提高维护效率。")]),v._v(" "),a("h3",{attrs:{id:"应用逻辑和事件处理的耦合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用逻辑和事件处理的耦合"}},[v._v("#")]),v._v(" 应用逻辑和事件处理的耦合")]),v._v(" "),a("p",[v._v("  这种耦合情况发生在"),a("code",[v._v("JavaScript")]),v._v("中，分别负责应用逻辑和事件处理的代码相互耦合；当其中一个部分发生错误时通常需要同时重写两部分。\n​  针对这种过紧耦合类型，一般将两类型代码分别封装成独立的函数或者类。"),a("br"),v._v("\n  事件处理程序分离应用逻辑的好处：")]),v._v(" "),a("blockquote",[a("ol",[a("li",[v._v("可以让你更容易更改触发特定过程的事件。如果最开始由鼠标点击事件触发过程，但现在按键也要进行同样处理，这种更改更加容易。")]),v._v(" "),a("li",[v._v("可以在不附加事件的情况下测试代码，使其更容易创建单位测试或者是自动化应用流程。")])])]),v._v(" "),a("p",[v._v("​  应用和业务逻辑之间松散耦合的原则：")]),v._v(" "),a("blockquote",[a("ol",[a("li",[v._v("勿将"),a("code",[v._v("event")]),v._v("对象传给其他方法；只传来自"),a("code",[v._v("event")]),v._v("对象中所需的数据；")]),v._v(" "),a("li",[v._v("任何可以在应用层面的动作都应该可以在不执行任何事件处理程序的情况下进行；")]),v._v(" "),a("li",[v._v("任何事件处理程序都应该处理事件，然后将处理转交给应用逻辑；")])])]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("注释")]),v._v(" "),a("p",[v._v("整理自 《JavaScript高级程序设计》")])])])}),[],!1,null,null,null);_.default=c.exports}}]);